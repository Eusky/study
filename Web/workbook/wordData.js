const questionsHTML = {
  no1: [
  "하나의 태그가 브라우저 좌우공간을 모두 차지하면서 독립적인 공간을 가지는 요소들입니다.",
  "브라우저 화면의 특정 구역을 만드는 용도(레이아웃 구성)로 사용합니다.",
  "이 요소는 내부에 이 요소와 인라인 요소를 포함할 수 있습니다.",
  ],
  no2: [
  "하나의 태그가 브라우저에서 특정 요소의 영역만 차지하여 좌우로 다른 태그가 나란히 위치할 수 있는 요소들입니다.", 
  "텍스트와 같은 컨텐츠의 영역만 차지하므로 텍스트레벨요소라고도 합니다.",
  "이 요소는 내부에 이 요소만 포함할 수 있습니다.",
  ],
  no3: [
    "닫는 태그가 없는 태그를 의미합니다.",
    "스스로 닫는 태그(Self-closing tag)라고 부릅니다.",],
  no4: [
    "닫는 태그가 있는 태그를 의미합니다.",
    "Normal element, Non-void element, Standard element 등으로 부릅니다.",],
  no5: [
    "HTML 문서에서 특수 문자나 예약 문자를 안전하게 표현하기 위해 사용하는 문자 참조 방식입니다.",
    "HTML에서는 일부 문자가 태그나 제어문자로 해석되기 때문에, 이 문자들을 그대로 입력하면 브라우저가 의도와 다르게 해석할 수 있습니다. 이런 문제를 방지하기 위해 이것을 사용합니다.",
  ],
  no6: [
    "<form> 태그의 데이터 전송 방식(method) 중 하나로 데이터가 URL에 노출되어 전송되어 검색, 단순 조회에 적합한 방식입니다.",
  ],
  no7: [
    "<form> 태그의 데이터 전송 방식(method) 중 하나로 데이터가 본문(body)에 담겨 전송되어 로그인, 회원가입 등 보안이 필요한 경우에 적합한 방식입니다.",
  ],
  no8: [
    "태그 사용 규칙: 태그(Tag)와 속성(Attribute) 이름은 ___ 로 작성합니다.",
  ],
  no9: [
    "이 태그는 태그는 HTML에서 제목(heading)을 표시하는 태그로, 문서의 구조와 계층을 나타내는 데 사용됩니다.",
    "이 태그들은 시맨틱(semantic) 요소로, 웹페이지의 논리적 구조와 검색 엔진 최적화(SEO), 접근성 향상에 중요한 역할을 합니다.",
  ],
  no10: [
    "이 태그는 HTML에서 paragraph(문단) 태그로, 웹 문서에서 텍스트의 단락(문단)을 구분할 때 사용합니다.",
    "태그는 하나의 문단을 나타내며, 주로 여러 문장을 하나의 의미 있는 덩어리로 묶을 때 활용합니다.",
  ],
  no11: [
    "이 태그는 'Unordered List'의 약자로, 순서가 중요하지 않은 항목들의 목록을 나타낼 때 사용하는 블록 요소입니다.",
    "항목의 순서가 바뀌어도 의미가 달라지지 않는 경우에 사용하며, 각 항목 앞에는 자동으로 글머리 기호(bullet)가 표시됩니다.",
  ],
  no12: [
    "이 태그는 'Ordered List'의 약자로, 순서가 중요한 항목들의 목록을 나타낼 때 사용하는 블록 요소입니다.",
    "각 항목 앞에는 숫자, 알파벳, 로마 숫자 등 순서를 나타내는 마커(marker)가 자동으로 표시됩니다.",
  ], 
  no13: [
    "이 태그는 'Definition List' 또는 'Description List'의 약자로, 용어(term)와 그에 대한 설명(description)을 짝지어 목록 형태로 표현할 때 사용하는 블록 요소입니다.",
    "HTML5에서는 의미가 확장되어, 용어 정의뿐만 아니라 이름-값, 질문-답변, 명칭-설명 등 다양한 정보 표현에 사용할 수 있습니다.",
  ],
  no14: [
    "이 태그는 HTML 문서에서 이미지를 삽입할 때 사용하는 태그입니다.",
    "이미지는 HTML 문서에 직접 삽입되는 것이 아니라, 이미지 파일을 링크하여 웹페이지에 표시하는 방식입니다.",
    "주요 속성은 src, alt, width, height 등입니다.",
  ],
  no15: [
    "이 태그는 HTML5에서 도입된 태그로, 웹페이지에 오디오(음악, 효과음 등) 파일을 삽입하고 재생할 수 있게 해줍니다.",
    "이 태그를 통해 사용자는 별도의 프로그램 없이도 웹에서 직접 소리를 들을 수 있습니다.",
    "주요 속성은 src, controls, autoplay 등입니다."
  ],
  no16: [
    "이 태그는 anchor의 약자로, HTML에서 하이퍼링크(hyperlink)를 생성할 때 사용하는 태그입니다.",
    "웹페이지에서 다른 페이지, 파일, 이메일 주소, 같은 페이지 내 특정 위치 등으로 이동할 수 있는 링크를 만들 때 사용합니다.",
    "주요 속성은 href, target, hreflang 등입니다.",
  ],
  no17: [
    "이 태그는 HTML에서 데이터를 행(Row)과 열(Column) 구조로 표현하기 위해 사용하는 태그입니다.",
    "웹페이지에서 상품 목록, 시간표, 통계 자료, 비교표 등 다양한 정보를 표 형태로 정리해서 보여줄 때 활용합니다.",
    "주요 구성 요소는 <tr>, <th>, <td>, <thead>, <tbody>, <tfoot> 등입니다.",
  ],
  no18: [
    "태그는 HTML에서 사용자로부터 데이터를 입력받기 위한 대화형 컨트롤을 생성하는 태그입니다.",
    "주로 <form> 태그와 함께 사용되어, 사용자가 입력한 데이터를 서버로 전송할 때 활용됩니다.",
    "빈 요소이기 때문에 닫는 태그 없이 사용합니다. 또한 인라인 요소이기 때문에 줄바꿈이 발생하지 않습니다.",
    "주요 type 속성은 text, password, email, url, checkbox, radio 등입니다.",
  ],
  no19: [
    "이 태그는 웹페이지에서 사용자가 클릭할 수 있는 버튼을 생성하는 HTML 요소입니다.",
    "폼(form) 내부 또는 독립적으로 사용할 수 있으며, 버튼 안에 텍스트, 이미지 등 다양한 콘텐츠를 포함할 수 있습니다.",
    "주요 속성은 type, autofocus, name 등입니다.",
  ],
  no20: [
    "이 태그는 웹페이지에서 사용자의 입력 데이터를 서버로 전송하기 위한 입력 양식(폼)을 정의하는 HTML 태그입니다.",
    "로그인, 회원가입, 검색, 설문 등 다양한 입력 기능의 기본 구조로 사용됩니다.",
    "내부에는 다양한 입력 요소(<input>, <select>, <textarea>, <button> 등)가 포함됩니다.",
  ],
};
const answersHTML = {
  no1: ["블록 요소", "Block Element"],
  no2: ["인라인 요소","Inline Element"],
  no3: ["빈 요소", "Void Element"],
  no4: ["일반 요소", "Normal Element"],
  no5: ["엔티티 코드", "Entity Code"],
  no6: ["get", "get 방식"],
  no7: ["post", "post 방식"],
  no8: ["소문자"],
  no9: ["<h>", "h", "h 태그"],
  no10: ["<p>", "p", "p 태그"],
  no11: ["<ul>", "ul", "ul 태그"],
  no12: ["<ol>", "ol", "ol 태그"],
  no13: ["<dl>", "dl", "dl 태그"],
  no14: ["<img>", "img", "img 태그"],
  no15: ["<audio>", "audio", "audio 태그"],
  no16: ["<a>", "a", "a 태그"],
  no17: ["<table>", "table", "table 태그"],
  no18: ["<input>", "input", "input 태그"],
  no19: ["<button>", "button", "button 태그"],
  no20: ["<form>", "form", "form 태그"],
};
const questionsCSS = {
  no1: [
    "CSS ___는 HTML 문서에서 스타일을 적용할 요소를 지정하는 방법입니다.",
    "태그 이름, 클래스, 아이디, 속성 등 다양한 기준으로 요소를 선택할 수 있습니다.",
  ],
  no2: [
    "요소의 상태(마우스 오버, 포커스, 체크 등) 또는 요소의 구조(첫 번째 자식, 홀수 번째 등)에 따라 스타일을 적용하는 선택자입니다.",
    "콜론 한 개(:)를 사용합니다. 예시) a:hover, input[type='text']:focus, li:first-child ",
  ],
  no3: [
    "존재하지 않는 요소 또는 요소의 일부에 스타일을 적용하는 선택자입니다.",
    "콜론 두 개(::)를 사용합니다. 예시) div::before, p::first-letter 등",
  ],
  no4: [
    "특정 태그에 style 속성을 추가하는 방식입니다.",
    "style 속성에 '속성1: 값1; 속성2: 값2; ...'' 형식으로 스타일을 작성합니다."
  ],
  no5: [
    "HTML 문서의 <head> 태그에 <style> 태그를 추가하고 스타일을 작성하는 방식입니다.",
  ],
  no6: [
    "별도의 CSS 파일에 스타일을 작성하는 방식입니다.",
    "<link> 태그에 해당 CSS 파일의 경로를 작성합니다."
  ],
  no7: [
    "CSS 속성(property) 중 텍스트에 적용할 글꼴(서체) 목록을 지정합니다.",
    "여러 글꼴을 쉼표로 구분해 지정할 수 있으며, 앞에서부터 순서대로 사용자의 시스템에 설치된 글꼴을 적용합니다.",
    "마지막에는 일반 글꼴 패밀리(serif, sans-serif, monospace, cursive, fantasy) 중 하나를 지정하는 것이 좋습니다.",
  ],
  no8: [
    "CSS 속성(property) 중 텍스트의 색상을 지정합니다. 다양한 색상 지정 방식을 사용할 수 있습니다:",
    "색상 이름(Keywords), 16진수(Hex) 표기법, RGB/RGBA 함수형 표기법, HSL/HSLA 함수형 표기법",
  ],
  no9: [
    "텍스트에 밑줄, 윗줄, 취소선 등 다양한 장식선을 추가하거나 꾸미는 데 사용하는 단축 속성입니다.",
    "장식선의 '종류 색상 스타일 두께'를 한 번에 지정할 수 있습니다.",
    "종류: underline, overline, line-through, none, 스타일: solid, double, dotted, dashed, wavy",
  ],
  no10: [
    "텍스트의 대소문자를 변환하는 CSS 속성입니다.",
    "capitalize: 각 단어의 첫 글자를 대문자로 변환합니다.",
    "uppercase: 모든 영문자를 대문자로 변환합니다.",
    "lowercase: 모든 영문자를 소문자로 변환합니다.",
  ],
  no11: [
    "블록 레벨 요소(예: div, p, h1 등) 내의 인라인 콘텐츠(텍스트, 인라인 요소 등)의 수평 정렬 방식을 지정하는 속성입니다.",
    "left, right, center, justify(양쪽 정렬)",
  ],
  no12: [
    "요소 간의 계층적 관계를 기준으로 스타일을 적용하는 CSS 선택자들입니다.",
    "A 요소의 직접적인 자식 B 요소를 선택합니다. 예: div > p는 div 바로 아래에 있는 p만 적용.",
  ],
  no13: [
    "요소 간의 계층적 관계를 기준으로 스타일을 적용하는 CSS 선택자들입니다.",
    "A 요소 내부에 있는 모든 B 요소를 선택합니다. 예: div p는 div 안의 모든 p에 적용.",
  ],
  no14: [
    "요소 간의 계층적 관계를 기준으로 스타일을 적용하는 CSS 선택자들입니다.",
    "A 요소 뒤에 있는 같은 부모를 가진 모든 B 형제 요소를 선택합니다",
  ],
  no15: [
    "요소 간의 계층적 관계를 기준으로 스타일을 적용하는 CSS 선택자들입니다.",
    "A 요소 바로 다음에 위치한 하나의 B 형제 요소를 선택합니다.",
  ],
  no16: [
    "CSS에서 사용하는 레이아웃 모델",
    "컨테이너 안의 아이템을 효율적으로 배치, 정렬 등의 작업을 할 수 있도록 합니다.",
    "기존 레이아웃 기술 float, display, position 등의 복잡성 및 한계 극복을 위해 도입됐습니다.",
  ],
  no17: [
    "컨텐츠와 테두리 사이의 여백을 지정하는 속성입니다.",
    "투명하며, 배경색을 지정하면 이 영역까지 확장됩니다.",
    "흔히 내부 여백이라고 합니다.",
    "4가지 사용 방법 TRBL 시계방향으로 돌아감.",
  ],
  no18: [
    "테두리의 바깥 여백을 설정하는 속성입니다.",
    "다른 요소와의 간격 조절을 위해서 사용합니다.",
    "흔히 외부 여백이라고 합니다.",
    "4가지 사용 방법 TRBL 시계방향으로 돌아감.",
  ],
  no19: [
    "CSS 속성 중 박스의 크기를 계산하는 방법입니다.",
    "이 속성에 따라 박스의 크기를 계산하는 방법이 달라집니다.",
    "content-box, border-box가 있습니다.",
  ],
  no20: [
    "HTML 문서 요소의 일반적인 흐름에서 띄워서(부유시켜서) 왼쪽 또는 오른쪽에 배치하는 방식입니다.",
    "최초 도입 목적은 이미지와 텍스트를 자연스럽게 감싸기 위해서 도입됐습니다.",
    "이후 레이아웃 구성에서도 많이 활용됐습니다.",
  ],
};
const answersCSS = {
  no1: ["선택자", "셀렉터", "Selector"],
  no2: ["가상 클래스", "Pseudo Class", "Pseudo-Class"],
  no3: ["가상 요소", "Pseudo Element", "Pseudo-Element"],
  no4: ["인라인 스타일 방식", "인라인", "인라인방식", "인라인스타일", "inlinestyle", "inline", "inline-style"],
  no5: ["내부 스타일시트 방식", "내부스타일", "내부스타일시트", "내부스타일방식", "internalstylesheet"],
  no6: ["외부 스타일시트 방식", "외부스타일", "외부스타일시트", "외부스타일방식", "externalstylesheet"],
  no7: ["font-family", "fontfamily"],
  no8: ["color"],
  no9: ["text-decoration", "textdecoration"],
  no10: ["text-transform", "texttransform"],
  no11: ["text-align", "textalign"],
  no12: ["자식 선택자"],
  no13: ["후손 선택자"],
  no14: ["형제 선택자"],
  no15: ["인접 형제 선택자"],
  no16: ["Flexbox", "flex"],
  no17: ["padding"],
  no18: ["margin"],
  no19: ["box-sizing", "boxsizing"],
  no20: ["float"],
};
const questionsJS = {
  no1: [
    "객체가 아니면서 메소드(method)와 속성(property)을 가지지 않는 데이터입니다.",
    "JavaScript primitive 라고 하고 다음 7종류가 해당됩니다.",
    "string, number, bigint, boolean, undefined, null, symbol",
  ],
  no2: [
    "JavaScript 타입의 특징 중 변수가 어떤 특정 타입과 연결되어 있지 않고 언제든 다른 타입으로 바꿀 수 있는 타입을 ____ 이라고 합니다.",
  ],
  no3: [
    "JavaScript 타입의 특징 중 일치하지 않는 타입이 포함된 경우 묵시적으로 스스로 타입 변환을 하는 타입을 ___ 이라고 합니다.",
  ],
  no4: [
    "백틱(``, backtick)으로 묶은 문자열을 의미합니다.",
    "여러 줄로 이루어진 문자열(multi-line strings)을 처리할 수 있습니다.",
    "문자열 보간(string interpolation) 기능을 사용할 수 있습니다.",
  ],
  no5: [
    "'끌어 올리다' 라는 뜻.",
    "JavaScript 인터프리터가 코드를 실행하기 전에 var 변수 선언, 함수 선언 또는 import를 해당 범위의 맨 위로 끌어올리는 것처럼 보이는 현상을 의미합니다.",
  ],
  no6: [
    "'조건식 ? true 일 때 반환값 : false 일 때 반환값'의 형식을 가진 연산자입니다.",
    "항이 3개이므로 삼항 연산자라고도 합니다.",
  ],
  no7: [
    "여러 개의 데이터를 순서대로 저장하고, 각 데이터에 인덱스를 통해 접근할 수 있는 선형 자료구조(Linear Data Structure)입니다.",
    "다양한 타입의 데이터를 한 배열에 저장할 수 있으며, 크기가 동적으로 변합니다.",
    "기본 프로퍼티 및 메소드: length, push(), pop() 등",
  ],
  no8: [
    "각 배열 요소의 위치 정보를 나타내는 정수값입니다.",
    "첫 번째 요소의 ___는 0이고 마지막 요소의 ___는 length-1 입니다.",
  ],
  no9: [
    "배열의 요소를 해체하여 그 값을 개별 변수에 담을 수 있게 하는 JavaScript 표현식입니다.",
    "배열의 각 요소를 순서대로 변수에 할당합니다.",
    "일부 요소만 할당하거나, 필요 없는 값은 쉼표로 건너뜁니다.",
    "...rest 문법(나머지 문법)을 이용해 필요한 변수만 할당할 수 있습니다.",
  ],
  no10: [
    "JavaScript 데이터 유형 중 하나입니다.",
    "데이터와 함수(메소드)를 하나로 묶어 관리할 수 있는 자료구조입니다.",
    "데이터가 저장되는 순서는 관리하지 않습니다.",
    "__를 구성하는 하나의 데이터는 속성(property): 값(value) 조합으로 구성됩니다. (key: value 구조를 가짐)",
  ],
  no11: [
    "특정 작업을 수행하는 코드 블록으로, 필요할 때마다 호출할 수 있습니다.",
    "코드의 재사용성, 가독성, 유지보수성, 추상화에 기여합니다.",
    "자바스크립트에서 __는 “1급 객체(First-class object)”로, 변수에 할당하거나, 인자로 전달하거나, 반환값으로 사용할 수 있습니다.",
  ],
  no12: [
    "함수를 정의할 때 소괄호 안에 선언하는 변수입니다.",
    "함수가 호출될 때 전달받는 값(인수, 인자, Argument)을 받아들이는 역할을 하며, 함수 내부에서 지역 변수로 사용됩니다.",
    "____를 선언할 땐 변수 선언 키워드(var, let, const)를 사용하지 않고, 변수명만 작성합니다.",
  ],
  no13: [
    "다른 함수의 인자로 전달되어, 그 함수 내부에서 실행되는 함수를 의미합니다.",
    "함수 자체가 매개변수로 전달되며, 전달받은 함수를 필요에 따라 실행하는 구조입니다.",
    "일회성 동작이 많아 이름 없는 익명 함수로 전달하는 경우가 많습니다.",
    "중첩해 사용하면 '콜백 지옥(callback hell)'이 발생해 코드가 복잡해질 수 있습니다."
  ],
  no14: [
    "_____은 객체 지향 프로그래밍의 상속 개념을 구현하는 핵심 메커니즘입니다.",
    "모든 객체는 자신의 부모 역할을 하는 _____ 객체와 연결되어 있으며, 이를 통해 부모 객체의 속성과 메소드를 상속받아 사용할 수 있습니다.",
    "자바스크립트의 모든 객체는 내부적으로 자신의 _____ 객체를 가리키는 링크를 가지고 있습니다.",
  ],
  no15: [
    "자바스크립트 객체 표기법의 줄임말입니다.",
    "JavaScript 객체 문법에서 파생되었으며, 구조화된 데이터를 표현하기 위한 문자 기반의 표준 포맷입니다.",
    "사람과 시스템이 모두 쉽게 읽고 분석할 수 있는 형태를 가지고 있어 웹 환경에서 서버와 클라이언트 간 데이터 교환 형식으로 널리 사용됩니다.",
    "반드시 프로퍼티를 큰 따옴표로 묶은 문자열로 표시, 후행 쉼표(trailing comma)를 허용하지 않는 등 JavaScript 객체와 일부 차이점을 가집니다.",
  ],
  no16: [
    "HTML, XML 문서의 프로그래밍 인터페이스입니다.",
    "프로그래밍 언어가 ___ 구조에 접근할 수 있는 방법을 제공하여 문서 구조, 스타일, 내용 등을 변경할 수 있게 돕습니다.",
  ],
  no17: [
    "DOM 객체에서 발생하는 어떤 시그널을 의미합니다.",
    "시스템에 일어나는 사건(Action) 또는 발생(Occurrence)을 의미합니다.",
    "주요 ___ 발생 방식: 사용자의 액션에 의해서 발생(클릭, 키보드 입력, 마우스 움직임 등), API의 ___ 생성",
  ],
  no18: [
    "특정한 규칙을 가진 문자열의 집합을 표현하기 위한 형식 언어입니다.",
    "텍스트 데이터에서 특정 패턴이나 규칙을 가진 문자열을 찾거나, 대체하거나, 검증할 때 사용됩니다.",
    "전화번호, 이메일, 우편번호 등 형식을 갖춘 문자열을 찾거나 처리할 수 있습니다."
  ],
  no19: [
    "자바스크립트에서 웹 브라우저와 서버 간에 데이터를 비동기적으로 주고받을 수 있게 해주는 핵심 Web API입니다.",
    "전체 페이지를 새로 고침하지 않고도, 웹 서버에 HTTP 요청을 보내고, 응답 데이터를 받아와 웹페이지의 일부를 동적으로 갱신할 수 있습니다.",
    "이러한 방식은 AJAX(Asynchronous JavaScript and XML) 프로그래밍의 기반이 됩니다.",
  ],
  no20: [
    "HTTP 파이프라인을 구성하는 요청과 응답 등의 요소를 JavaScript 에서 접근하고 조작할 수 있는 인터페이스를 제공합니다.",
    "제공하는 전역 함수를 이용해 네트워크의 리소스를 쉽게 비동기적으로 취득할 수 있습니다",
    "XMLHttpRequest와 달리 Promise 기반으로 개선되었습니다.",
  ],
};
const answersJS = {
  no1: ["원시값"],
  no2: ["동적 타입", "dynamictype"],
  no3: ["약 타입", "weaktype"],
  no4: ["템플릿 리터럴", "template-literals", "templateliterals", "templateliteral"],
  no5: ["호이스팅", "hoisting"],
  no6: ["조건 연산자"],
  no7: ["배열", "array"],
  no8: ["인덱스", "index"],
  no9: ["구조 분해 할당", "destructuringassignment", "destructuring"],
  no10: ["객체", "object"],
  no11: ["함수", "function"],
  no12: ["매개변수", "parameter"],
  no13: ["콜백", "콜백함수", "callback", "callbackfunction"],
  no14: ["프로토타입", "prototype"],
  no15: ["JSON"],
  no16: ["DOM", "문서객체모델"],
  no17: ["이벤트", "event"],
  no18: ["정규표현식", "정규식", "regexp", "regularexpression"],
  no19: ["XMLHttpRequest"],
  no20: ["Fetch", "fetchapi"],
};
const questionsReact = {
  no1: [
    "리액트 애플리케이션을 구성하는 가장 작은 단위입니다.",
    "화면에 표시되는 내용을 기술하는 자바스크립트 객체로, 실제 DOM 요소의 가상 표현입니다.",
    "불변(immutable)하며, 한 번 생성되면 변경되지 않습니다. 화면을 업데이트할 때는 새로운 이것을 생성해 교체합니다",
    "문법이 직관적이지 않아 사용하기 불편하기 때문에 JSX라는 새로운 문법이 나중에 제시되었습니다.",
  ],
  no2: [
    "React Element와 같은 구성 요소들을 화면에 그리는 작업입니다.",
  ],
  no3: [
    "최신 문법(화살표 함수, 클래스, 템플릿 리터럴 등)이나 React의 ___ 문법, TypeScript 등을 브라우저에서 바로 사용할 수 있도록, 실시간으로 ES5 이하의 자바스크립트 코드로 변환해줍니다.",
    "이것을 통해 변환된 코드는 다양한 브라우저(특히 구형 브라우저)에서도 동일하게 동작할 수 있습니다. 즉, 브라우저 호환성을 높여줍니다.",
  ],
  no4: [
    "React에서 UI를 정의하기 위해 사용하는 자바스크립트의 확장 문법입니다.",
    "HTML과 매우 유사한 구조를 자바스크립트 코드 안에서 직접 사용할 수 있게 해주며, 가독성과 직관성을 높여줍니다.",
  ],
  no5: [
    "React에서 특정 기능이나 UI를 담당하는 독립적인 코드 블록입니다.",
    "여러 개의 Element를 조합하여 더 큰 UI 단위를 만들 수 있으며, 재사용이 가능합니다.",
    "props와 state를 통해 동적인 데이터를 다루고, 상태(state)가 변경될 때마다 자동으로 다시 렌더링됩니다.",
  ],
  no6: [
    "React에서 컴포넌트 간에 데이터를 전달할 때 사용하는 객체입니다.",
    "주로 부모 컴포넌트가 자식 컴포넌트에게 데이터나 설정값을 넘겨줄 때 활용되며, 컴포넌트의 동작과 렌더링 결과를 동적으로 제어할 수 있습니다.",
    "상위(부모) 컴포넌트에서 하위(자식) 컴포넌트로 데이터를 전달하는 역할을 합니다.",
    "JSX에서 HTML 속성처럼 사용하며, 자식 컴포넌트에서는 함수의 매개변수(파라미터)로 전달받아 사용할 수 있습니다.",
  ],
  no7: [
    "리스트 렌더링 시 각 항목을 고유하게 식별하기 위해 사용합니다.",
    "이는 React가 효율적으로 변경 사항을 추적하고 업데이트하는 데 도움을 줍니다.",
    "이것이 존재하는 경우 빠르게 어떤 요소에 변화가 일어났는지 감지할 수 있습니다.",
    "React에서 컴포넌트 배열을 rendering 했을 때 어떤 요소에 변경이 있는지 알아내기 위해 사용하는 식별자 역할을 수행합니다.",
  ],
  no8: [
    "이벤트 속성 이름 표기법: HTML에서는 소문자(onclick, onchange)를 사용하지만 React에서는 _____방식으로 작성합니다.",
  ],
  no9: [
    "이벤트 핸들러 전달 방식: 이벤트 핸들러는 이벤트 발생 시 실행할 코드를 작성해 놓은 함수입니다.",
    "HTML에서는 함수를 문자열로 전달하지만, React에서는 함수를 ___로 전달합니다.",
    "함수명 뒤에 괄호를 붙이지 않고 함수 참조만 전달해야 합니다. 괄호를 붙이면 즉시 실행됩니다.",
  ],
  no10: [
    "컴포넌트를 이용해 엘리먼트가 화면에 나타나거나, 업데이트 되거나, 삭제될 때 호출되는 메소드를 의미합니다.",
    "클래스형 컴포넌트에서만 호출할 수 있습니다.",
    "주요 3단계",
    "Mount : 엘리먼트가 화면에 나타나는 것을 의미합니다.",
    "Update : 엘리먼트가 수정되어 화면이 다시 그려지는 것을 의미합니다.",
    "Unmount : 엘리먼트가 화면에서 사라지는 것을 의미합니다.",
  ],
  no11: [
    "컴포넌트 내부에서 관리되는 동적인 데이터를 의미합니다.",
    "컴포넌트의 _____는 시간이 지남에 따라, 또는 사용자와의 상호작용에 따라 변경될 수 있으며, _____가 변경되면 해당 컴포넌트와 그 자식 컴포넌트가 자동으로 다시 렌더링됩니다.",
  ],
  no12: [
    "state의 값을 직접 변경하지 않고, 반드시 _______________ 메소드를 사용해야 합니다.",
    "this.state를 직접 변경하면 렌더링이 일어나지 않습니다.",
    "이 메소드를 호출하면 리액트가 변경을 감지하고 컴포넌트를 리렌더링합니다.",
  ],
  no13: [
    "JSX의 속성 중 하나로 자바스크립트 예약어와 충돌하지 않도록 변경된 이름을 사용하는 속성입니다.",
    "JavaScript: class, JSX: _________",
  ],
  no14: [
    "JSX의 속성 중 하나로 자바스크립트 예약어와 충돌하지 않도록 변경된 이름을 사용하는 속성입니다.",
    "JavaScript: for, JSX: _______",
  ],
  no15: [
    "인라인 스타일은 객체 형태로 style 속성에 전달합니다.",
    "기존 dash-case(kebab-case) 형식의 CSS 속성명을 _________ 방식으로 변경합니다.",
  ],
  no16: [
    "여러 태그를 단일 태그로 생성하기 위해 사용하는 가상 태그로, 실제 DOM에는 렌더링되지 않습니다.",
    "불필요한 <div> 없이 여러 요소를 반환하고 싶을 때 사용합니다.",
  ],
  no17: [
    "JavaScript 클래스를 이용하는 컴포넌트입니다.",
    "state와 life cycle API를 사용할 수 있습니다.",
    "상대적으로 복잡하고 React.Component를 상속 받아서 작성합니다.",
  ],
  no18: [
    "JavaScript 함수를 이용하는 컴포넌트입니다.",
    "최초엔 state와 life cycle API를 사용할 수 없었지만 React v16.8 이후로 state와 life cycle API를 훅(hooks)을 통해 사용할 수 있습니다.",
    "상대적으로 간결하여 리액트 개발자 진영에서는 _______ 사용을 권장합니다.",
  ],
  no19: [
    "props 객체를 객체 ______으로 간결하게 사용할 수 있습니다."
  ],
  no20: [
    "JSX에서는 객체 자체를 직접 렌더링할 수 없어 ___로 변환해야 합니다.",
    "객체의 속성에 접근하는 것은 가능합니다.",
  ],
};
const answersReact = {
  no1: ["Element", "엘리먼트", "엘러먼트"],
  no2: ["Rendering", "render", "렌더링"],
  no3: ["Babel", "바벨"],
  no4: ["JSX"],
  no5: ["Component", "컴포넌트"],
  no6: ["props", "프롭스", "properties"],
  no7: ["key", "keyprops", "key-props"],
  no8: ["camelCase", "카멜케이스"],
  no9: ["중괄호"],
  no10: ["Life Cycle"],
  no11: ["state"],
  no12: ["this.setState()", "setState()", "setState", "this.setState"],
  no13: ["className"],
  no14: ["htmlFor"],
  no15: ["camelCase", "카멜케이스"],
  no16: ["React.Fragment", "<></>", "<react.fragment></react.fragment>"],
  no17: ["클래스형 컴포넌트"],
  no18: ["함수형 컴포넌트"],
  no19: ["구조 분해 할당"],
  no20: ["문자열"],
};

const questionsDB = {
  no1: ["데이터 정의어", 
    "데이터베이스, 테이블, 사용자 등의 정보를 다루는 언어", 
    "종류: (1) CREATE: 생성, (2) ALTER: 수정 (3) DROP: 삭제 (4) TRUNCATE: 삭제의 한 종류",
  ],
  no2: ["데이터 조작어", 
    "실제 데이터를 다루는 언어", 
    "종류: (1) INSERT: 삽입 (2) UPDATE: 갱신 (3) DELETE: 삭제"
  ],
  no3: ["데이터 질의어", 
    "데이터를 검색할 때 사용하는 언어", 
    "종류: SELECT: 조회",
  ],
  no4: ["데이터 제어어", 
    "사용자의 권한을 제어할 때 사용하는 언어", 
    "종류: (1) GRANT: 승인 (2) REVOKE: 승인 해제",
  ],
  no5: ["트랜잭션 제어어", 
    "트랜잭션을 처리할 때 사용하는 언어", 
    "종류: (1) COMMIT: 트랜잭션 성공(작업 내용 저장) (2) ROLLBACK: 트랜잭션 실패(작업 내용 취소)",
  ],
  no6: ["'관계형 데이터베이스 관리시스템'의 약어", 
    "데이터를 구성하기 위해서 테이블을 사용하는 데이터베이스", 
    "직관적 구조인 테이블을 사용하기 때문에 학습 및 유지 보수가 수월함", 
    "대용량의 데이터를 손쉽게 저장하고 관리할 수 있음",
  ],
  no7: ["테이블의 데이터(행, Row)를 고유하게(Unique) 식별할 수 있는(Identify) 칼럼 또는 칼럼의 조합", 
    "종류로는 슈퍼키(Super Key), 후보키(Candidate Key), 대체키(Alternate Key), 기본키(Primary Key), 외래키(Foreign Key)가 있다.",
  ],
  no8: ["트랜잭션의 특징 4가지를 축약한 용어",
    "트랜잭션의 특징", 
    "원자성(Atomicity), 일관성(Consistency), 격리성(Isolation), 지속성(Durability)",
  ],
  no9: ["데이터베이스에서 처리되는 여러 SQL 명령들을 하나의 논리적 작업 단위로 처리하는 것",
    "작업이 시작되면 중간에 멈추지 않고 반드시 종료해야 하는 작업 단위",
    "작업 도중 하나라도 실패하면 아무 일도 하지 않은 상태로 되돌아가야 함",
  ],
  no10: ["SELECT 절에서 중복된 값을 제거하기 위해 사용하는 키워드입니다.",
  ],
  no11: ["SQL에서 테이블이나 칼럼에 별칭(alias)을 부여할 때 사용하는 키워드",
    "생략 가능합니다.",
  ],
  no12: ["2개 이상의 테이블을 동시에 조회하는 방식",
    "조회할 때 필요한 정보가 여러 테이블에 존재하는 경우에 사용함",
    "종류: 크로스 __, 내부 __, 외부 __",
  ],
  no13: ["FROM 절에서 사용되는 서브 쿼리를 ____라고 합니다.",
    "별칭(alias)가 필수적으로 요구됩니다.",
  ],
}

const answersDB = {
  no1: ["DDL","Data Definition Language",],
  no2: ["DML", "Data Manipulation Language",],
  no3: ["DQL", "Data Query Language",],
  no4: ["DCL", "Data Control Language",],
  no5: ["TCL", "Transaction Control Language",],
  no6: ["RDBMS", "Relational DataBase Management System",],
  no7: ["키", "key",],
  no8: ["ACID",],
  no9: ["트랜잭션", "Transaction",],
  no10: ["DISTINCT",],
  no11: ["AS",],
  no12: ["조인", "JOIN"],
  no13: ["인라인 뷰", "Inline View",],
}